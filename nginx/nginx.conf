# Define o usuário sob o qual o Nginx será executado. 'nginx' é um usuário padrão criado para rodar o serviço
# de forma segura, evitando privilégios de root e reduzindo riscos de segurança.
user nginx;
# Define o número de processos trabalhadores (workers). 'auto' ajusta automaticamente com base no número de
# núcleos da CPU, otimizando o uso de recursos para lidar com múltiplas conexões.
worker_processes auto;
# Especifica o caminho do arquivo de log de erros e o nível de severidade. 'warn' registra mensagens de aviso
# ou mais graves, ajudando a identificar problemas sem sobrecarregar o log com detalhes triviais.
error_log /var/log/nginx/error.log warn;
# Define o arquivo onde o PID (ID do processo) do Nginx é armazenado. Isso é usado pelo sistema para gerenciar
# o processo (ex.: parar ou reiniciar o servidor).
pid /var/run/nginx.pid;
# Bloco 'events' configura como o Nginx gerencia eventos de rede, como conexões de clientes.
events {
    # Define o número máximo de conexões simultâneas por processo trabalhador. 1024 é um valor padrão razoável,
    # mas pode ser aumentado em servidores com mais carga ou recursos.
    worker_connections 1024;
}
# Bloco 'http' contém configurações globais para o protocolo HTTP/HTTPS.
http {
    # Inclui um arquivo externo que associa extensões de arquivos (ex.:
    .html, .jpg) a tipos MIME, permitindo
    # que o Nginx informe corretamente aos navegadores como interpretar os arquivos enviados.
    include /etc/nginx/mime.types;
    # Define o tipo MIME padrão para arquivos sem extensão mapeada.
    'application/octet-stream' é um tipo genérico
    # que indica um fluxo de bytes brutos, deixando a interpretação para o cliente.
    default_type application/octet-stream;
    # Ativa o uso de 'sendfile', uma chamada de sistema eficiente que transfere arquivos diretamente do disco para
    # a rede, reduzindo a sobrecarga ao evitar cópias na memória do usuário.
    sendfile on;
    # Define o tempo (em segundos) que uma conexão persistente (keep-alive) será mantida aberta. 65 segundos é um
    # valor equilibrado que melhora a performance ao reutilizar conexões, mas evita desperdício de recursos.
    keepalive_timeout 65;
    # Define um grupo de servidores upstream (backend) chamado 'flask_app'. O Nginx balanceará as requisições entre
    # esses servidores usando um algoritmo padrão (round-robin, a menos que configurado de outra forma).
    upstream flask_app {
        # Servidor primário na porta 5000 (app1). 'max_fails=3' e
        'fail_timeout=30s' definem tolerância a falhas:
        # após 3 falhas em 30 segundos, o servidor é temporariamente removido do balanceamento.
        server app1:5000 max_fails=3 fail_timeout=30s;
        # Segundo servidor primário na porta 5001 (app2), com as mesmas regras de tolerância a falhas.
        server app2:5001 max_fails=3 fail_timeout=30s;
        # Servidor de backup na porta 3000 (app3). Só é usado se os servidores primários estiverem indisponíveis,
        # funcionando como uma camada extra de resiliência.
        server app3:3000 backup;
    }
    # Primeiro bloco 'server': lida com requisições HTTP na porta 80 e redireciona para HTTPS.
    server {
        # Escuta na porta 80, padrão para HTTP, permitindo que o servidor receba requisições não seguras.
        listen 80;
        # Define o nome do servidor. 'localhost' é usado para testes locais; em produção, seria um domínio real.
        server_name localhost;
        # Redireciona todas as requisições para HTTPS com um código 301 (redirecionamento permanente), melhorando
        # a segurança ao forçar o uso de conexões criptografadas.
        return 301 https://$host$request_uri;
    }
    # Segundo bloco 'server': lida com requisições HTTPS na porta 443 com suporte a HTTP/2.
    server {
        # Escuta na porta 443 (padrão para HTTPS) com SSL ativado e HTTP/2 habilitado. HTTP/2 melhora a eficiência
        # com multiplexação e compressão de cabeçalhos, mas exige SSL/TLS.
        listen 443 ssl http2;
        # Nome do servidor, novamente 'localhost' para testes locais. Em produção, use seu domínio (ex.: example.com).
        server_name localhost;
        # Caminho para o certificado SSL (inclui o certificado público e a cadeia de certificação). Aqui, usamos um
        # certificado autoassinado gerado localmente.
        ssl_certificate /etc/letsencrypt/fullchain.pem;
        # Caminho para a chave privada correspondente ao certificado. Deve ser mantida segura e nunca exposta.
        ssl_certificate_key /etc/letsencrypt/privkey.pem;
        # Define os protocolos SSL/TLS suportados. TLSv1.2 e TLSv1.3 são versões modernas e seguras; versões mais
        # antigas (ex.: SSLv3) são evitadas por vulnerabilidades.
        ssl_protocols TLSv1.2 TLSv1.3;
        # Prioriza as cifras definidas pelo servidor em vez das preferências do cliente, aumentando a segurança ao
        # garantir o uso de opções fortes.
        ssl_prefer_server_ciphers on;
        # Lista de cifras criptográficas permitidas. 'EECDH+AESGCM:EDH+AESGCM' são opções modernas e seguras,
        # compatíveis com HTTP/2 e otimizadas para desempenho e proteção.
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
        # Bloco 'location' define como tratar requisições para a raiz ('/') do site.
        location / {
            # Encaminha as requisições para o grupo upstream 'flask_app', delegando o processamento aos servidores
            # backend (app1, app2 ou app3).
            proxy_pass http://flask_app;
            # Define cabeçalhos HTTP enviados ao backend para preservar informações do cliente:
            # 'Host' mantém o domínio original da requisição, essencial para aplicações que dependem dele.
            proxy_set_header Host $host;
            # 'X-Real-IP' envia o IP real do cliente ao backend, útil para logs ou autenticação.
            proxy_set_header X-Real-IP $remote_addr;
            # 'X-Forwarded-For' adiciona o IP do cliente à lista de proxies, permitindo rastreamento em cenários com
            # múltiplos proxies.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 'X-Forwarded-Proto' informa o protocolo original (http ou https), importante para aplicações que precisam
            # saber se a requisição inicial foi segura.
            proxy_set_header X-Forwarded-Proto $scheme;
            # Define o tempo máximo (em segundos) para estabelecer a conexão com o backend. 10 segundos é um valor
            # baixo, exigindo respostas rápidas ou falhando a requisição.
            proxy_connect_timeout 10;
            # Limita o tempo para enviar dados ao backend, evitando travamentos se o backend estiver lento.
            proxy_send_timeout 10;
            # Limita o tempo para receber uma resposta do backend, garantindo que requisições demoradas sejam encerradas.
            proxy_read_timeout 10;
            # Define o tamanho máximo do corpo da requisição (ex.: uploads). '10M' (10 megabytes) protege contra abusos,
            # como envio de arquivos muito grandes.
            client_max_body_size 10M;
        }
    }
}